//////////////////////////////////////////////////////////////////
// Copyright (c) 2016-2017 Contributors to the Eclipse Foundation 
//
// See the NOTICES file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// All rights reserved. This program and the accompanying materials 
// are made available under the terms of the Apache License, Version 2.0
// which accompanies this distribution and is available at
// http://www.opensource.org/licenses/apache2.0.php
//
// SPDX-License-Identifier: Apache-2.0
// 
// Authors: Mark Struberg
//////////////////////////////////////////////////////////////////

[[configprovider]]
== Accessing or Creating a certain Configuration


For using Microprofile-Config in a programmatic way the `ConfigProvider` class is the central point to access a configuration.
It allows access to different configurations (represented by a `Config` instance) based on the application in which it is used.
The `ConfigProvider` internally delegates through to the `ConfigProviderResolver` which contains more low-level functionality.

We distinguish 5 different ways to create or `Config` instance:

* In CDI manged components a user can use `@Inject` to access the current application configuration.
  If no configuration is registered the automatic discovery of <<configsource,ConfigSources>> will be performed.

* A factory method `ConfigProvider#getConfig()` to create a `Config` object based on automatically picked up `ConfigSources`
  of the Application identified by the current Thread Context ClassLoader classpath.
  Subsequent calls to this method for a certain Application will return the same `Config` instance.

* A factory method `ConfigProvider#getConfig(ClassLoader forClassLoader)` to create a `Config` object based on automatically picked up `ConfigSources`
  of the Application identified by the given ClassLoader.
  This can be used if the Thread Context ClassLoader does not represent the correct layer.
  E.g. if you need the Config for a class in a shared EAR lib folder.
  Subsequent calls to this method for a certain Application will return the same `Config` instance.

* A factory method `ConfigProviderResolver#getBuilder()` to create a `Config` object which can be filled manually via a builder.
  This configuration instance will by default not be shared by the `ConfigProvider`.
  This method is intended be used if a IoT container or any other external Factory can be used to give access to a manually created shared `Config`.

* A factory method `ConfigProvider#registerConfig()` can be used to register a `Config` within the application.
  This configuration instance *will* be shared by `ConfigProvider#getConfig()`.
  Any subsequent call to `ConfigProvider#getConfig()` will return the registered `Config` instance for this application.


All methods in the `ConfigProvider`, `ConfigProviderResolver` and `Config` implementations are thread safe and reentrant.

`Config` instances managed by the appliation are `Serializable`.

If a `Config` is bound to an Application it is ensured that it gets properly removed if the Application gets destroyed.
The Config system does not create any memory leaks in that case.

A `Config` can be released manually by calling `ConfigProvider#release(Config)`.
This will unbind the current `Config` from the application.
<<configsource, ConfigSources>> which implement the `java.io.Closeable` interface will be properly destroyed.
<<converter, Converters>> which implement the `java.io.Closeable` interface will be properly destroyed.
Any subsequent call to `ConfigProvider#getConfig()` or `ConfigProvider#getConfig(ClassLoader forClassLoader)` will result in a new `Config` instance.

<<<