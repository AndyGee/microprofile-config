//////////////////////////////////////////////////////////////////
// Copyright (c) 2016-2017 Contributors to the Eclipse Foundation 
//
// See the NOTICES file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// All rights reserved. This program and the accompanying materials 
// are made available under the terms of the Apache License, Version 2.0
// which accompanies this distribution and is available at
// http://www.opensource.org/licenses/apache2.0.php
//
// SPDX-License-Identifier: Apache-2.0
// 
// Authors: Mark Struberg
//////////////////////////////////////////////////////////////////

[[converter]]
== Converter

For providing typeseafe configuration we need to convert from the configured Strings into target types.
This happens by providing `Converter` s in the `Config`.

=== Built-in Converters

The following `Converter` s are provided by Microprofile-Config by default:

* `Boolean` , values for `true` (case insensitive) "true", "1", "YES", "Y" "JA" "J", "OUI".
  Any other value will be interpreted as `false`
* `Integer`
* `Long`
* `Float` , a dot '.' is used to separate the fractional digits
* `Double` , a dot '.' is used to separate the fractional digits
* `java.util.Date` in ISO-8601 format (https://www.ietf.org/rfc/rfc3339.txt), e.g. YYYY-MM-DD. Remaining fractions are set to 0.
* Java8 `Duration`
* Java8 `LocalTime`
* Java8 `LocalDate`
* Java8 `LocalDateTime`

All built-in `Converter` have the `@Priority` of `1`.


=== Adding custom Converters

A custom `Converter` must implement the generic interface `org.eclipse.microprofile.config.spi.Converter`.
The Type parameter of the interface is the target type the String is converted to.
You have to register your implementation in a file `/META-INF/services/org.eclipse.microprofile.config.spi.Converter` by writing the fully qualified class name of the custom implementation into it.

A custom `Converter` can define a priority with the `@javax.annotation.Priority` annotation.
If a Priority annotation isn't applied, a default priority of 100 is assumed.
The `Config` will use the `Converter` with the highest `Priority` for each target type.

A custom `Converter` for a target type of any of the built-in Converters will overwrite the default Converter.
